;; The proposed main layer implements one of the variants of home row modifers:
;; - We white-list the core keys of the layout to ensure they are evaluated by the `key-timing` logic.
;; - `switch` checks if the `key-timing` of the 3rd most recent key is less than a quarter of a second and, if so, skips the modifier evaluation.
;; - 3 represents the `key-recency` and should equal the maximum number of modifiers to be held simultaneously (accounting for chords).
;; - 250 represents the elapsed `time` since the key specified above was pressed and it should be adjusted to your typing speed.
;; - `tap-hold-release-timeout` triggers a modifier while held only if another key is pressed *and* released before the timeout, after which the expected repeat action for the key would trigger instead.

(defcfg
  process-unmapped-keys no
)

(defsrc
  ` 1 2 3 4 5 6 7 8 9 0 - =
  q w e r t y u i o p [ ] \
  a s d f g h j k l ; '
  z x c v b n m , . /
         spc
)

(deftemplate charmod (char mod)
  (switch
    ((key-timing 3 less-than 250)) $char break
    () (tap-hold-release 200 500 $char $mod) break
  )
)

(defchords mtl 50
  (w  ) w
  (  e) e
  (w e) esc
)

;; (defchords mtr 50
;;   (i  ) i
;;   (  o) o
;;   (i o) bspc
;; )
;;
;; (defchords mbl 50
;;   (x  ) (t! charmod x ralt)
;;   (  c) c
;;   (x c) tab
;; )
;;
;; (defchords mbr 50
;;   (,  ) ,
;;   (  .) (t! charmod . ralt)
;;   (, .) ret
;; )

(deflayermap (main)
  w (chord mtl w)
  e (chord mtl e)
  a (t! charmod a lctl)
  s (t! charmod s lalt)
  d (t! charmod d lctl)
  f (t! charmod f lsft)
  j (t! charmod j rsft)
  k (t! charmod k rctl)
  l (t! charmod l lalt)
  ; (t! charmod ; rctl)
  v (t! charmod v caps)
  c (t! charmod c caps)
  n (t! charmod n caps)
  m (t! charmod m caps)
)
